buildscript {
    ext {
        minCodeCoverage = 1.0
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath  libs.dependency.check.gradle
    }

    apply from: 'gradle/jacoco.gradle'
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'

    // Java developers should always use Lombok to make their code less cluttered.
    id "io.freefair.lombok"

    // Documentation is best generated with every build.
    id "org.asciidoctor.jvm.convert"
    id 'com.epages.restdocs-api-spec'

    id "com.github.spacialcircumstances.gradle-cucumber-reporting"
    id "com.github.jmongard.git-semver-plugin"

    // Used to have continuous vulnerability scanning for my dependencies.
    // Simple way to eliminate the risk of Log4Shell shock
    id "org.owasp.dependencycheck"

    // Knowing what licenses the dependencies of your application have and fail the build when you violate a compliance
    // rule during development time saves a lot of time and money from lawsuits
    id "com.cmgapps.licenses"

    // Running MongoDB in a Docker container simplifies development and therefore speeds it up
    id 'com.avast.gradle.docker-compose'

    // Having all dependencies in a standard format available will make it easier for your legal department to define
    // contracts that can be uphold from day one.
    id "org.cyclonedx.bom"
    id "nebula.lint"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

apply from: 'gradle/semver.gradle'

// -----------------------------------------------------------
//
// Property generation and substitution
def repositoryDir = rootProject.buildDir.path + File.separator + "repository"
mkdir repositoryDir
ext['repositoryDir'] = new File(repositoryDir).toURI()
ext['projectName'] = project.name

processResources {
    def props = ["projectName":project.name, "versionName":version, "buildNumber":buildNumber]
    filesMatching (['**/application.properties', '**/extent-config.xml']) {
        expand project.properties
    }
}

dependencies {
    implementation libs.bundles.spring.boot
    implementation libs.bundles.spring.restdocs

    compileOnly libs.jakarta.servlet.api

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    implementation libs.flogger.system.backend

    compileOnly libs.mongodb.driver.sync
}

dependencies {
    testImplementation (platform("org.junit:junit-bom:_"))
    testImplementation libs.junit.platform.suite
}

test {
    systemProperties System.getProperties()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }

        bddTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }

            sources {
                java {
                    srcDirs = ['src/bddTest/java']
                }
                resources {
                    srcDirs = ['src/bddTest/resources']
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        docGenTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }

            sources {
                java {
                    srcDirs = ['src/docs/java']
                }
                resources {
                    srcDirs = ['src/docs/resources']
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }

        prototypingTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }

            sources {
                java {
                    srcDirs = ['src/proto/java']
                }
                resources {
                    srcDirs = ['src/proto/resources']
                }
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

configurations {
    bddTestImplementation.extendsFrom testImplementation
    docGenTestImplementation.extendsFrom testImplementation
    prototypingTestImplementation.extendsFrom testImplementation
}

tasks.named('check') {
    dependsOn(testing.suites.bddTest)
    dependsOn(testing.suites.docGenTest)
}

jacocoTestReport {
    dependsOn test, bddTest, docGenTest
}

jacocoTestCoverageVerification {
    dependsOn test, bddTest, docGenTest
}

tasks.withType(Test).configureEach {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.showStandardStreams = true
    reports {
        junitXml.required = true
        html.required = true
    }

    finalizedBy jacocoTestReport
}

// -----------------------------------------------------------
//
// JUnit
apply from: 'gradle/junit.gradle'

// -----------------------------------------------------------
//
// Cucumber
apply from: 'gradle/cucumber.gradle'

// -----------------------------------------------------------
//
// Security
apply from: 'gradle/security.gradle'

// -----------------------------------------------------------
//
// ASCII Doctor
apply from: 'gradle/asciidoctor.gradle'

bootJar {
    dependsOn asciidoctor
    mainClass  = 'com.arc_e_tect.blog.phonebook.ArcETectPhonebookApplication'
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
    from ("${cucumberReports.outputDir}/cucumber-html-reports") {
        into 'static/reports/scenarios'
    }
    from ("${buildDir}/api-spec") {
        into 'static/specs'
    }
}

springBoot {
    buildInfo {
        properties {
            name = "Acr-E-Tect Phonebook"
            additional = [
                    by: System.properties['user.name'],
                    continuousIntegration: System.getenv('CI') ? true: false,
            ]
        }
    }
}

// -----------------------------------------------------------
//
// RestDoc API Spec
dependencies {
    testImplementation libs.restdocs.api.spec.mockmvc
}

openapi3 {
    server = 'https://localhost:9090'
    title = 'Arc-E-Tect Phonebook API'
    description = 'API description for the Arc-E-Tect Phonebook service'
    version = '1.0'
    format = 'json'
}

postman {
    title = 'Arc-E-Tect Phonebook API'
    version = "${version}"
    baseUrl = 'https://localhost:9090'
}

// ------------------------------------------------------------
// Docker

dockerCompose.isRequiredBy(bootRun)
dockerCompose.isRequiredBy(bddTest)
dockerCompose.isRequiredBy(docGenTest)
if (System.getProperty("prototyping").equals('true')) {
    println "Setting up for prototyping"
    println "Arc-E-Tect Phonebook will be mocked by Mock-Server"
    dockerCompose.isRequiredBy(prototyping)
    dockerCompose {
        stopContainers=true
        useComposeFiles=['docker-compose.yml','docker-compose-mockserver.yml']
    }
} else {
    dockerCompose {
        stopContainers=true
    }
}

gradleLint {
    autoLintAfterFailure="false"
    rules  = ['archaic-wrapper']
}

check.finalizedBy refreshVersions

