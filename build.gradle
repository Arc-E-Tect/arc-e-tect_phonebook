buildscript {
    ext {
        minCodeCoverage = 0.80
    }

    repositories {
        mavenCentral()
        jcenter() // for gradle-versions-plugin
    }

    apply from: "dependency_version.properties"

    dependencies {
        classpath  group: "org.owasp", name:"dependency-check-gradle", version:"${dependencyCheckPluginVersion}"
    }

    apply from: 'gradle/jacoco.gradle'
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "${cucumberReportingGradleVersion}"
    id "com.github.ben-manes.versions" version "${gitversionerGradleVersion}"
    id "io.freefair.lombok" version "${lombokGradleVersion}"
    id "com.github.jmongard.git-semver-plugin" version "${gitSemverPluginVersion}"
    id "org.owasp.dependencycheck" version "${dependencyCheckPluginVersion}"
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.asciidoctor.jvm.convert' version "${asciiDoctorGradleVersion}"
    id 'org.unbroken-dome.test-sets' version "${testSetsGradleVersion}"
    id "com.cmgapps.licenses" version "${licenseChecker}"
}

group = 'com.arc_e_tect.blog'

sourceCompatibility = '11'
targetCompatibility = '11'

dependencyUpdates.gradleReleaseChannel="current"

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

apply from: 'gradle/semver.gradle'

// -----------------------------------------------------------
//
// Property generation and substitution
ext['junit-jupiter.version'] = "${jUnitVersion}" // Also change jUnitVersion
def repositoryDir = rootProject.buildDir.path + File.separator + "repository"
mkdir repositoryDir
ext['repositoryDir'] = new File(repositoryDir).toURI()
ext['projectName'] = project.name

processResources {
    def props = ["projectName":project.name, "versionName":version, "buildNumber":buildNumber]
    filesMatching (['**/application.properties', '**/extent-config.xml']) {
        expand project.properties
    }
}

lombok {
    version = "${lombokVersion}"
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation group: 'joda-time', name: 'joda-time', version: "${jodaTimeVersion}"
    implementation group: "com.google.flogger", name: "flogger-system-backend", version: "${floggerVersion}"
}

testSets {
    intTest { dirName = 'int-test' }
    bddTest {
        dirName = 'bdd-test'
        extendsFrom intTest
    }
    docGen {
        dirName = 'docs'
    }
}

dependencies {
    intTestImplementation group: 'org.mock-server', name: 'mockserver-client-java', version: "${mockServerVersion}"
    intTestImplementation group: 'org.mock-server', name: 'mockserver-netty', version: "${mockServerVersion}"
}

intTest.mustRunAfter test
bddTest.dependsOn intTest
check.dependsOn bddTest

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jacocoTestReport {
    dependsOn test
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
        html.enabled = true
    }

    finalizedBy jacocoTestReport
}

// -----------------------------------------------------------
//
// JUnit
apply from: 'gradle/junit.gradle'

// -----------------------------------------------------------
//
// Cucumber
apply from: 'gradle/cucumber.gradle'

// -----------------------------------------------------------
//
// Sonarlint
//apply from: 'gradle/sonarlint.gradle'

// -----------------------------------------------------------
//
// Security
apply from: 'gradle/security.gradle'

